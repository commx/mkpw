#!/usr/bin/env python
# coding: utf-8

"""
mkpw is a small tool to generate safe passwords.

By default, three passwords are generated that match the following criterias:
  1. The password must include lowercase letters
  2. The password must include uppercase letters
  3. The password must include digits
  4. The password must include at least one special character
  5. The password must be at least 16 characters long

You can override this default by providing configuration files, or the command line arguments.

Copyright 2016 Christian Kr√∂ger <commx@commx.ws>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import string

from argparse import ArgumentParser

try:
    from secrets import choice as rand_choice
except ImportError:
    from random import choice as rand_choice


__version__ = '0.2.0'
__url__ = 'https://github.com/commx/mkpw'

# ambigious characters
ambigious_chars = '01OIl|B8G6S5Z2'

# special characters to be used for generating passwords
special_chars = '!"#$%&\'()*+,-./:;<=>?@[\]^_`{|}~'


def main():
    parser = ArgumentParser(description='Make safe passwords.')
    parser.add_argument('count', default=1, type=int, nargs='?')
    parser.add_argument('-s, --segments', dest='segments', type=int, default=4, help='number of segments')
    parser.add_argument('-l, --segment-length', dest='segment_length', type=int, default=5, help='number of characters '
                                                                                                 'in segment')
    parser.add_argument('--with-ambigious', dest='with_ambigious', default=False, action='store_true',
                        help='include ambigious characters')
    parser.add_argument('-x', dest='exclude_special', default=False, action='store_true', help='exclude special '
                                                                                               'characters')
    parser.add_argument('--sep', default='-', help='segment separator string')
    parser.add_argument('--version', action='version', version='mkpw %s (%s)' % (__version__, __url__))

    args = parser.parse_args()

    # prepare available characters to choose from
    available_chars = string.ascii_uppercase + string.ascii_lowercase + string.digits

    if not args.exclude_special:
        available_chars += special_chars

    for c in range(args.count):
        segments = [make_word(available_chars, args.segment_length, not args.with_ambigious)
                    for _ in range(args.segments)]
        print(args.sep.join(segments))


def make_word(chars, length, exclude_ambigious=False):
    """
    Create a password.

    :param chars: Available characters
    :param length: Length of desired word
    :param exclude_ambigious: exclude ambigious characters
    :return: password string
    """
    choices = chars

    if exclude_ambigious:
        choices = ''.join(x for x in chars if x not in ambigious_chars)

    return ''.join(rand_choice(choices) for _ in range(length))


if __name__ == '__main__':
    main()
